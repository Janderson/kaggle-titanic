get
getwd()
train <- read.csv("data\train.csv")
train <- read.csv("data/train.csv")
View(train)
View(train)
library(rpart)
rpart()
?rpart()
fit <- rpart(data=train, Survived ~ Sex + train$Age)
plot(fit)
predict(fit, test)
test <- read.csv("data/test.csv")
predict(fit, test)
fit <- rpart(data=train, Survived ~ Sex + Age)
predict(fit, test)
View(test)
result <- test[,1]
result <- dataframe(test[,1])
result <- dataframe(passagerid=test[,1])
result <- data.frame(passagerid=test[,1])
View(result)
result$Survived <- predict(fit, test)
View(result)
?predict(fit, test)
result$Survived <- predict(fit, test, cp=0)
predict(fit, test, cp=0)
predict(fit, test, cp=1)
?predict(fit, test)
fit <- rpart(data=train, Survived ~ Sex + Age, method = "class")
plot(fit)
rpart.plot(fit)
library("rpart.plot")
rpart.plot(fit)
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked, method = "class")
rpart.plot(fit)
# method as class return a binary tree
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked, method = "class")
predict(fit, test)
rpart.plot(fit)
result$Survived <- predict(fit, test)
rpart.plot(fit)
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + PClass, method = "class")
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass, method = "class")
rpart.plot(fit)
result$Survived <- predict(fit, test, method="class")
train$title <- ifelse(grepl('Mr ',titanicDF$Name),'Mr',ifelse(grepl('Mrs ',titanicDF$Name),'Mrs',ifelse(grepl('Miss',titanicDF$Name),'Miss','Nothing')))
train$title <- ifelse(grepl('Mr ',train$Name),'Mr',ifelse(grepl('Mrs ',train$Name),'Mrs',ifelse(grepl('Miss',train$Name),'Miss','Nothing')))
train$title <- ifelse(grepl('Mr.',train$Name),'Mr',ifelse(grepl('Mrs ',train$Name),'Mrs',ifelse(grepl('Miss',train$Name),'Miss','Nothing')))
fit <- rpart(data=train, Survived ~ ., method = "class")
rpart.plot(fit)
result$Survived <- predict(fit, test, method="class")
fit <- rpart(data=train, Survived ~ ., method = "class")
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass + title, method = "class")
rpart.plot(fit)
train$title <- ifelse(grepl('Mr.',train$Name),ifelse(grepl('Mrs ',train$Name),'Mrs','Mr',ifelse(grepl('Master.',train$Name),'Master',ifelse(grepl('Miss',train$Name),'Miss','Nothing'))))
#predict(fit, test)
ifelse
?ifelse
train$title <- ifelse(grepl('Mr.',train$Name),ifelse(grepl('Mrs ',train$Name),'Mrs','Mr',ifelse(grepl('Mrs ',train$Name),'Mrs',ifelse(grepl('Miss',train$Name),'Miss','Nothing')))
train$title <- ifelse(grepl('Mr.',train$Name),'Mr',ifelse(grepl('Mrs ',train$Name),'Mrs',ifelse(grepl('Miss',train$Name),'Miss','Nothing')))
train$title <- ifelse(grepl('Mr.',train$Name),'Mr',ifelse(grepl('Mrs ',train$Name),'Mrs',ifelse(grepl('Miss',train$Name),'Miss','Nothing')))
train$title <- ifelse(grepl('Mr.',train$Name),'Mr',ifelse(grepl('Mrs ',train$Name),'Mrs',ifelse(grepl('Miss',train$Name),'Master.',ifelse(grepl('Master',train$Name),'Miss','Nothing'))))
train$title <- ifelse(grepl('Mr.',train$Name),'Mr',ifelse(grepl('Mrs ',train$Name),'Mrs',ifelse(grepl('Miss',train$Name),'Miss',ifelse(grepl('Master',train$Name),'Master','Nothing'))))
train$title <- ifelse(grepl('Mr.',train$Name),'Mr',
ifelse(grepl('Mrs ',train$Name),'Mrs',
ifelse(grepl('Miss',train$Name),'Miss',
ifelse(grepl('Master',train$Name),'Master',
ifelse(grepl('Dr',train$Name),'Dr',
'Nothing')))))
train$title <- ifelse(grepl('Mr.',train$Name),'Mr',
ifelse(grepl('Mrs ',train$Name),'Mrs',
ifelse(grepl('Miss',train$Name),'Miss',
ifelse(grepl('Master',train$Name),'Master',
ifelse(grepl('Dr',train$Name),'Dr',
ifelse(grepl('Rev',train$Name),'Rev',
'Nothing'))))))
train$cabCol <- ifelse(grepl('A',train$Name),'A',
ifelse(grepl('B',train$Name),'B',
ifelse(grepl('C',train$Name),'C',
ifelse(grepl('D',train$Name),'D',
ifelse(grepl('E',train$Name),'E',
ifelse(grepl('F',train$Name),'F',
'-'))))))
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass + title + cabCol, method = "class")
result$Survived <- predict(fit, test, method="class")
rpart.plot(fit)
train <- dataCleaning(train)
dataCleaning <- function(df){
df$title <- ifelse(grepl('Mr.',df$Name),'Mr',
ifelse(grepl('Mrs ',df$Name),'Mrs',
ifelse(grepl('Miss',df$Name),'Miss',
ifelse(grepl('Master',df$Name),'Master',
ifelse(grepl('Dr',df$Name),'Dr',
ifelse(grepl('Rev',df$Name),'Rev',
'Nothing'))))))
df$cabCol <- ifelse(grepl('A',df$Name),'A',
ifelse(grepl('B',df$Name),'B',
ifelse(grepl('C',df$Name),'C',
ifelse(grepl('D',df$Name),'D',
ifelse(grepl('E',df$Name),'E',
ifelse(grepl('F',df$Name),'F',
'-'))))))
return(df)
}
train <- dataCleaning(train)
test <- dataCleaning(test)
View(train)
df$cabCol <- ifelse(grepl('A',df$Cabin),'A',
ifelse(grepl('B',df$Cabin),'B',
ifelse(grepl('C',df$Cabin),'C',
ifelse(grepl('D',df$Cabin),'D',
ifelse(grepl('E',df$Cabin),'E',
ifelse(grepl('F',df$Cabin),'F',
'-'))))))
dataCleaning <- function(df){
df$title <- ifelse(grepl('Mr.',df$Name),'Mr',
ifelse(grepl('Mrs ',df$Name),'Mrs',
ifelse(grepl('Miss',df$Name),'Miss',
ifelse(grepl('Master',df$Name),'Master',
ifelse(grepl('Dr',df$Name),'Dr',
ifelse(grepl('Rev',df$Name),'Rev',
'Nothing'))))))
df$cabCol <- ifelse(grepl('A',df$Cabin),'A',
ifelse(grepl('B',df$Cabin),'B',
ifelse(grepl('C',df$Cabin),'C',
ifelse(grepl('D',df$Cabin),'D',
ifelse(grepl('E',df$Cabin),'E',
ifelse(grepl('F',df$Cabin),'F',
'-'))))))
return(df)
}
train <- dataCleaning(train)
test <- dataCleaning(test)
train <- dataCleaning(train)
test <- dataCleaning(test)
dataCleaning <- function(df){
df$title <- ifelse(grepl('Mr.',df$Name),'Mr',
ifelse(grepl('Mrs ',df$Name),'Mrs',
ifelse(grepl('Miss',df$Name),'Miss',
ifelse(grepl('Master',df$Name),'Master',
ifelse(grepl('Dr',df$Name),'Dr',
ifelse(grepl('Rev',df$Name),'Rev',
'Nothing'))))))
# I'm sure have a better way to do this :)
df$cabCol <- ifelse(grepl('A',df$Cabin),'A',
ifelse(grepl('B',df$Cabin),'B',
ifelse(grepl('C',df$Cabin),'C',
ifelse(grepl('D',df$Cabin),'D',
ifelse(grepl('E',df$Cabin),'E',
ifelse(grepl('F',df$Cabin),'F',
ifelse(grepl('G',df$Cabin),'G',
'-')))))))
return(df)
}
train <- dataCleaning(train)
test <- dataCleaning(test)
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass + title + cabCol, method = "class")
rpart.plot(fit)
result$Survived <- predict(fit, test, method="class")
result$Survived <- ifelse(predict(fit, test, method="class")>.5, 1,0)
write.csv(result)
?write.csv( result)
write.csv(result, file="result.csv")
write.csv(result, file="data/result.csv")
write.csv(result, file="data/result.csv", col.names = F)
write.csv(result, file="data/result.csv", row.names =  F)
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")
result <- data.frame(PassengerId=test[,1])
train <- dataCleaning(train)
test <- dataCleaning(test)
# first using RPART
library("rpart")
library("rpart.plot")
# method as class return a binary tree
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass + title + cabCol, method = "class")
#some visualization
rpart.plot(fit)
# export data
result$Survived <- ifelse(predict(fit, test, method="class")>.5, 1,0)
write.csv(result, file="data/result.csv", row.names =  F)
View(result)
result$Survived <- ifelse(predict(fit, test, method="class")>.5, 1,0)
View(result)
write.csv2(result, file="data/result.csv", row.names =  F)
write.csv(result, file="data/result.csv", row.names =  F)
write.csv(result[,1], file="data/result.csv", row.names =  F)
write.csv(result[,0:1], file="data/result.csv", row.names =  F)
write.csv(result[,1:2], file="data/result.csv", row.names =  F)
write.csv(result[,1:1], file="data/result.csv", row.names =  F)
write.csv(result[,1:2], file="data/result.csv", row.names = F, quote = "")
result$Survived <- ifelse(predict(fit, test, method="class")>.5, "1","0")
write.csv(result, file="data/result.csv", row.names = F )
result$Survived <- predict(fit, test, method="class")>.5
result
tail(result)
result$Survived <- list(predict(fit, test, method="class")) >.5
result$Survived <- predict(fit, test, method="class")
result$Survived <- predict(fit, test)
tail(result)
result$Survived <- predict(fit, test, cp=0)
tail(result)
result <- data.frame(PassengerId=test[,1])
tail(result)
result$Survived <- ?predict(fit, test, cp=0)
?predict(fit, test, cp=0)
?rpart
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,
parms = list(prior = c(.65,.35), split = "information"))
fit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,
control = rpart.control(cp = 0.05))
par(mfrow = c(1,2), xpd = NA) # otherwise on some devices the text is clipped
plot(fit)
text(fit, use.n = TRUE)
plot(fit2)
text(fit2, use.n = TRUE)
rpart.plot(fit)
rpart.plot(fit2)
rpart.plot(fit3)
rpart.plot(fit1)
rpart.plot(fit)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis, method="class")
rpart.plot(fit)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis, method="anova")
rpart.plot(fit)
result$Survived <- predict(fit, test, type="class")
tail(result)
result$Survived <- predict(fit, test, type="vector")
result$Survived <- predict(fit, test, type="prob")
predict(fit, test, type="prob")
result$Survived <- predict(fit, test)
?rpart()
predict(fit, test)
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass + title + cabCol, method = "class")
predict(fit, test)
predict(fit, test, type="class")
result$Survived <- predict(fit, test, type="class"); tail(result)
result$Survived <- predict(fit, test, type="classe")
result$Survived <- predict(fit, test, type="class")
write.csv(result, file="data/result.csv", row.names = F )
result$Survived <- as.numeric(predict(fit, test, type="class"))
write.csv(result, file="data/result.csv", row.names = F )
predict(fit, test, type="class")
predict(fit, test, type="class")
predict(fit, test, type="matrix")
predict(fit, test, type="probs")
predict(fit, test, type="prob")
predict(fit, test, type="vector")
predict(fit, test, type="class")
rpart.plot(fit)
result$Survived <- as.numeric(predict(fit, test, type="class"))
tail(fit)
tail(result)
predict(fit, test, type="class")
result$Survived <- predict(fit, test, type="class")
tail(result)
write.csv(result, file="data/result.csv", row.names = F )
result$Survived <- as.numeric(result$Survived)
tail(result)
result$Survived <- as.double(result$Survived)
tail(result)
result$Survived <- predict(fit, test, type="class")
result$Survived <- as.double(result$Survived)
tail(result)
result$Survived <- predict(fit, test, type="class")
write.csv(result, file="data/result.csv", row.names = F )
install.packages("caret")
install.packages("pROC")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/GitHub/kaggle-titanic/examples_and_resources/binary-outcome-examples.r')
# load libraries
library(caret)
library(pROC)
#################################################
# data prep
#################################################
# load data
titanicDF <- read.csv('http://math.ucdenver.edu/RTutorial/titanic.txt',sep='\t')
titanicDF$Title <- ifelse(grepl('Mr ',titanicDF$Name),'Mr',ifelse(grepl('Mrs ',titanicDF$Name),'Mrs',ifelse(grepl('Miss',titanicDF$Name),'Miss','Nothing')))
titanicDF$Age[is.na(titanicDF$Age)] <- median(titanicDF$Age, na.rm=T)
# miso format
titanicDF <- titanicDF[c('PClass', 'Age',    'Sex',   'Title', 'Survived')]
# dummy variables for factors/characters
titanicDF$Title <- as.factor(titanicDF$Title)
titanicDummy <- dummyVars("~.",data=titanicDF, fullRank=F)
titanicDF <- as.data.frame(predict(titanicDummy,titanicDF))
print(names(titanicDF))
# what is the proportion of your outcome variable?
prop.table(table(titanicDF$Survived))
# save the outcome for the glmnet model
tempOutcome <- titanicDF$Survived
# generalize outcome and predictor variables
outcomeName <- 'Survived'
predictorsNames <- names(titanicDF)[names(titanicDF) != outcomeName]
#################################################
# model it
#################################################
# get names of all caret supported models
names(getModelInfo())
titanicDF$Survived <- ifelse(titanicDF$Survived==1,'yes','nope')
View(titanicDF)
# pick model gbm and find out what type of model it is
getModelInfo()$gbm$type
# split data into training and testing chunks
set.seed(1234)
splitIndex <- createDataPartition(titanicDF[,outcomeName], p = .75, list = FALSE, times = 1)
trainDF <- titanicDF[ splitIndex,]
testDF  <- titanicDF[-splitIndex,]
# create caret trainControl object to control the number of cross-validations performed
objControl <- trainControl(method='cv', number=3, returnResamp='none', summaryFunction = twoClassSummary, classProbs = TRUE)
# run model
objModel <- train(trainDF[,predictorsNames], as.factor(trainDF[,outcomeName]),
method='gbm',
trControl=objControl,
metric = "ROC",
preProc = c("center", "scale"))
summary(objModel)
# find out model details
objModel
# class prediction
predictions <- predict(object=objModel, testDF[,predictorsNames], type='raw')
head(predictions)
postResample(pred=predictions, obs=as.factor(testDF[,outcomeName]))
install.packages("e1071")
# class prediction
predictions <- predict(object=objModel, testDF[,predictorsNames], type='raw')
head(predictions)
postResample(pred=predictions, obs=as.factor(testDF[,outcomeName]))
# probabilities
predictions <- predict(object=objModel, testDF[,predictorsNames], type='prob')
head(predictions)
postResample(pred=predictions[[2]], obs=ifelse(testDF[,outcomeName]=='yes',1,0))
auc <- roc(ifelse(testDF[,outcomeName]=="yes",1,0), predictions[[2]])
print(auc$auc)
# pick model gbm and find out what type of model it is
getModelInfo()$glmnet$type
# save the outcome for the glmnet model
titanicDF$Survived  <- tempOutcome
# split data into training and testing chunks
set.seed(1234)
splitIndex <- createDataPartition(titanicDF[,outcomeName], p = .75, list = FALSE, times = 1)
trainDF <- titanicDF[ splitIndex,]
testDF  <- titanicDF[-splitIndex,]
# create caret trainControl object to control the number of cross-validations performed
objControl <- trainControl(method='cv', number=3, returnResamp='none')
objModel <- train(trainDF[,predictorsNames], trainDF[,outcomeName], method='glmnet',  metric = "RMSE", trControl=objControl)
splitIndex <- createDataPartition(titanicDF[,outcomeName], p = .75, list = FALSE, times = 1)
trainDF <- titanicDF[ splitIndex,]
testDF  <- titanicDF[-splitIndex,]
# create caret trainControl object to control the number of cross-validations performed
objControl <- trainControl(method='cv', number=3, returnResamp='none')
# get predictions on your testing data
predictions <- predict(object=objModel, testDF[,predictorsNames])
library(pROC)
auc <- roc(testDF[,outcomeName], predictions)
print(auc$auc)
postResample(pred=predictions, obs=testDF[,outcomeName])
# find out variable importance
summary(objModel)
plot(varImp(objModel,scale=F))
objModel
display variable importance on a +/- scale
vimp <- varImp(objModel, scale=F)
results <- data.frame(row.names(vimp$importance),vimp$importance$Overall)
results$VariableName <- rownames(vimp)
colnames(results) <- c('VariableName','Weight')
results <- results[order(results$Weight),]
results <- results[(results$Weight != 0),]
par(mar=c(5,15,4,2)) # increase y-axis margin.
xx <- barplot(results$Weight, width = 0.85,
main = paste("Variable Importance -",outcomeName), horiz = T,
xlab = "< (-) importance >  < neutral >  < importance (+) >", axes = FALSE,
col = ifelse((results$Weight > 0), 'blue', 'red'))
axis(2, at=xx, labels=results$VariableName, tick=FALSE, las=2, line=-0.3, cex.axis=0.6)
################################################
# advanced stuff
################################################
# boosted tree model (gbm) adjust learning rate and and trees
gbmGrid <-  expand.grid(interaction.depth =  c(1, 5, 9),
n.trees = 50,
shrinkage = 0.01)
# run model
objModel <- train(trainDF[,predictorsNames], trainDF[,outcomeName], method='gbm', trControl=objControl, tuneGrid = gbmGrid, verbose=F)
# get predictions on your testing data
predictions <- predict(object=objModel, testDF[,predictorsNames])
library(pROC)
auc <- roc(testDF[,outcomeName], predictions)
print(auc$auc)
# boosted tree model (gbm) adjust learning rate and and trees
gbmGrid <-  expand.grid(interaction.depth =  c(1, 5, 9),
n.trees = 50,
shrinkage = 0.01)
# run model
objModel <- train(trainDF[,predictorsNames], trainDF[,outcomeName], method='gbm', trControl=objControl, tuneGrid = gbmGrid, verbose=F)
install.packages('xgboost')
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
library(xg
)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type="source")
install.packages("xgboost")
require(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
model <- xgboost(data = train$data, label = train$label,
nrounds = 2, objective = "binary:logistic")
preds = predict(model, test$data)
predict(model, test$data)
cv.res <- xgb.cv(data = train$data, label = train$label, nfold = 5,
nrounds = 2, objective = "binary:logistic")
train
tail(train)
tail(train$data)
View(trainDF)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
model <- xgboost(data = train, nrounds = 2, objective = "binary:logistic")
train <- agaricus.train$data
model <- xgboost(data = train, nrounds = 2, objective = "binary:logistic")
train <- agaricus.train
test <- agaricus.test
model <- xgboost(data = train$data, label = train$label,
nrounds = 2, objective = "binary:logistic")
preds = predict(model, test$data)
train$label
cv.res <- xgb.cv(data = train$data, label = train$label, nfold = 5,
nrounds = 2, objective = "binary:logistic")
cv.res <- xgb.cv(data = train$data, label = train$label, nfold = 5,
nrounds = 200, objective = "binary:logistic")
?rpart
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass + title + cabCol, method = "class", control = rpart.control(xval=5))
# This script try a submission using simple decision tree
#importing data -
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")
result <- data.frame(PassengerId=test[,1])
# some cleaning data
# tips from here
# https://triangleinequality.wordpress.com/2013/09/08/basic-feature-engineering-with-the-titanic-data/
# http://amunategui.github.io/binary-outcome-modeling/
dataCleaning <- function(df){
df$title <- ifelse(grepl('Mr.',df$Name),'Mr',
ifelse(grepl('Mrs ',df$Name),'Mrs',
ifelse(grepl('Miss',df$Name),'Miss',
ifelse(grepl('Master',df$Name),'Master',
ifelse(grepl('Dr',df$Name),'Dr',
ifelse(grepl('Rev',df$Name),'Rev',
'Nothing'))))))
# I'm sure have a better way to do this :)
df$cabCol <- ifelse(grepl('A',df$Cabin),'A',
ifelse(grepl('B',df$Cabin),'B',
ifelse(grepl('C',df$Cabin),'C',
ifelse(grepl('D',df$Cabin),'D',
ifelse(grepl('E',df$Cabin),'E',
ifelse(grepl('F',df$Cabin),'F',
ifelse(grepl('G',df$Cabin),'G',
'-')))))))
return(df)
}
train <- dataCleaning(train)
test <- dataCleaning(test)
# first using RPART
library("rpart")
library("rpart.plot")
fit <- rpart(data=train, Survived ~ Sex + Age + Embarked + Pclass + title + cabCol, method = "class", control = rpart.control(xval=5))
#some visualization
rpart.plot(fit)
# export data
result$Survived <- predict(fit, test, type="class")
write.csv(result, file="data/result.csv", row.names = F )
